#!/usr/bin/env python
import resource
import traceback

from opster import command
import tornado.ioloop
from tornado.ioloop import IOLoop, PeriodicCallback

from minion.app import app
from minion.config import config
import minion.db.commands  # prevents dependency cycle with manager
from minion import daemon
from minion.subprocess.manager import manager
from minion import handlers
from minion.logger import logger


@command(usage='[--daemonize] [--pidfile PIDFILE]')
def main(daemonize=('', False, 'Daemonize this process'),
         pidfile=('', None, 'Use this pidfile')):
    """This script starts mastermind minion daemon
       for remote task execution and instance stats retrieval"""
    if daemonize:
        logger.debug('Daemon initialization')
        try:
            d = daemon.Daemon(pidfile or config['common']['pidfile'])
            d.run = run
            logger.debug('Starting daemon')
            d.start()
        except Exception as e:
            logger.error('Failed to start daemon: {0}'.format(e))
            logger.error(traceback.format_exc())
            return 1
    else:
        run()


def setup():
    if config['common']['dump_core'] == 'True':
        # allows to store child processes' core dumps
        logger.info('Setting rlimit_core to unlimited to store core dumps')
        try:
            resource.setrlimit(
                resource.RLIMIT_CORE,
                (resource.RLIM_INFINITY, resource.RLIM_INFINITY)
            )
        except Exception as e:
            logger.error('Failed to set rlimit_core: {}'.format(e))
            pass


def run():
    logger.info('Starting event loop...')

    IOLoop.current().run_sync(manager.update_broken_commands)
    # Default is 12 hours.
    callback_time = config.get('common', {}).get('period_of_check_broken_command_sec', 43200) * 1000
    periodic_update_broken_command = PeriodicCallback(
        callback=manager.update_broken_commands,
        callback_time=callback_time,
    )
    periodic_update_broken_command.start()

    app.listen(int(config['common']['port']))

    setup()

    tornado.ioloop.IOLoop.instance().start()


if __name__ == '__main__':
    main.command()
